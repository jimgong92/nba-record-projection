package projections;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

public class RAPMProjection extends Projection{
	/*Excel sheet with data
	 	*Accepts spreadsheet in the form of:
	 			offensiveRAPM	defensiveRAPM	minutesPlayed
	 	player1
	 	player2
	 	etc
	 */

	private final float DUNEBOGGLER_COEFFICIENT = (float) 2.3575;

	//Catalogs wins generated by each player, key is player name
	private HashMap<String, Float> winsGBP = new HashMap<String, Float>();
	

	public RAPMProjection(File statsheet) {
		super(statsheet);
		try {
			setup();
			applyWinStabilization();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	public HashMap<String, Float> getWinsGBP() {
		return winsGBP;
	}
	@Override
	//type == 0 -> Provide whole number record, type == 1 -> provide float wins
	public void display(int type) {
		if (type == 0) {
			System.out.print(this.teamName + "'s Projected Record by RAPM: ");
			System.out.println(this.record == null ? "Not enough information given" : this.record);			
		}
		else {
			System.out.print(this.teamName + "'s Projected Wins by RAPM: ");
			System.out.println(this.record == null ? "Not enough information given" : this.winsGBL);		
		}
	}

	private void setup() throws Exception{
		Scanner fileScan = new Scanner(statsheet);
		
		//initialize
		String[] fileLine = fileScan.nextLine().split(",");
		int format = fileLine.length > 3 ? 0 : 1; //if fileLine is only 3 in length, then oRAPM accounts for totalRAPM
		teamName = fileLine[0];
		
		fileLine = fileScan.nextLine().split(",");
		String playerName = fileLine[0];
		float oRAPM = Float.parseFloat(fileLine[1 + format]);
		float dRAPM = format == 0 ? Float.parseFloat(fileLine[2]) : 0;
		float expMin = Float.parseFloat(fileLine[3 - format]);
		//handle both expected playing time given as a percentage or a raw total
		float expPT = expMin <= 1.0 ? expMin : expMin/POSSIBLE_MINUTES;
		float adjRAPM = (oRAPM + dRAPM) * expPT; //netRAPM times expected playing time
		float winsG = adjRAPM * DUNEBOGGLER_COEFFICIENT;
		
		winsGBP.put(playerName, winsG);
		winsGBL += winsG;
		
		while (fileScan.hasNext()) {
			//read token
			fileLine = fileScan.nextLine().split(",");
			playerName = fileLine[0];
			oRAPM = Float.parseFloat(fileLine[1 + format]);
			dRAPM = format == 0 ? Float.parseFloat(fileLine[2]) : 0;
			expMin = Float.parseFloat(fileLine[3 - format]);
			expPT = expMin <= 1.0 ? expMin : expMin/POSSIBLE_MINUTES;
			adjRAPM = (oRAPM + dRAPM) * expPT; 
			winsG = adjRAPM * DUNEBOGGLER_COEFFICIENT;
			
			winsGBP.put(playerName, winsG);
			winsGBL += winsG;
		}
		winsGBL += 41;
		wholeWinsGBL = Math.round(winsGBL);
		record = (wholeWinsGBL) + " - " + (TOTAL_GAMES - wholeWinsGBL);
		fileScan.close();
	}
	
}
