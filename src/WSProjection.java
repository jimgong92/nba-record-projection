package projections;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

public class WSProjection extends Projection {
	/*WS sheet organization
	 	Player OffWS DefWS LastSeasonMP PredictedMP
	 	
	 * Determine OWS48 and DWS48
	 */
	
	//Catalogs wins generated by each player, key is player name
	private HashMap<String, Float> winsGBP = new HashMap<String, Float>();
	
	private float oWinsGBL = 0, dWinsGBL = 0;
	
	public WSProjection(File statsheet) {
		super(statsheet);
		try {
			setup();
			applyWinStabilization();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	public HashMap<String, Float> getWinsGBP() {
		return winsGBP;
	}
	@Override
	//type == 0 -> Provide whole number record, type == 1 -> provide float wins
	public void display(int type) {
		if (type == 0) {
			System.out.print(this.teamName + "'s Projected Record by WS: ");
			System.out.println(this.record == null ? "Not enough information given" : this.record);			
		}
		else {
			System.out.print(this.teamName + "'s Projected Wins by WS: ");
			System.out.println(this.record == null ? "Not enough information given" : this.winsGBL);		
		}
	}
	
	private void setup() throws Exception{
		Scanner fileScan = new Scanner(statsheet);
		
		//initialize
		String[] fileLine = fileScan.nextLine().split(",");
		teamName = fileLine[0];
		
		fileLine = fileScan.nextLine().split(",");
		String playerName = fileLine[0];
		float oWS = Float.parseFloat(fileLine[1]);
		float dWS = Float.parseFloat(fileLine[2]);
		float oldPT = Float.parseFloat(fileLine[3]);
		
		//handle rookies (oldPT == -1)
		float oWS48 = oldPT > 0 ? oWS / (oldPT / 48) : oWS;
		float dWS48 = oldPT > 0 ? dWS / (oldPT / 48) : dWS;
		float expPT = Float.parseFloat(fileLine[4]);
		//handle both expected playing time given as a percentage or a raw total
		float expMin = expPT <= 1.0 ? expPT * POSSIBLE_MINUTES: expPT;
		float oWinsG = oWS48 * (expMin / 48);
		float dWinsG = dWS48 * (expMin / 48);
		
		winsGBP.put(playerName, oWinsG + dWinsG);
		winsGBL += oWinsG + dWinsG;
		oWinsGBL += oWinsG;
		dWinsGBL += dWinsG;
		
		while (fileScan.hasNext()) {
			//read token
			fileLine = fileScan.nextLine().split(",");
			playerName = fileLine[0];
			oWS = Float.parseFloat(fileLine[1]);
			dWS = Float.parseFloat(fileLine[2]);
			oldPT = Float.parseFloat(fileLine[3]);
			oWS48 = oldPT > 0 ? oWS / (oldPT / 48) : oWS;
			dWS48 = oldPT > 0 ? dWS / (oldPT / 48) : dWS;
			expPT = Float.parseFloat(fileLine[4]);
			//handle both expected playing time given as a percentage or a raw total
			expMin = expPT <= 1.0 ? expPT * POSSIBLE_MINUTES: expPT;
			oWinsG = oWS48 * (expMin / 48);
			dWinsG = dWS48 * (expMin / 48);
			
			winsGBP.put(playerName, oWinsG + dWinsG);
			oWinsGBL += oWinsG;
			dWinsGBL += dWinsG;
		}
		
		winsGBL = oWinsGBL + dWinsGBL;
		wholeWinsGBL = Math.round(winsGBL);
		record = (wholeWinsGBL) + " - " + (TOTAL_GAMES - wholeWinsGBL);
		fileScan.close();
	}
	public static void main(String[] args) {

		ArrayList<WSProjection> projections = new ArrayList<WSProjection>();
		for (File file : new File("data").listFiles()) {
			if (file.isFile() & file.getName().endsWith("WS.csv")) projections.add(new WSProjection(file));
		}

		//display
		for (int i = 0; i < projections.size(); i++) projections.get(i).display(1);

		
	}
}
